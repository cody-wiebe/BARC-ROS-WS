// Generated by gencpp from file barc/camera_out.msg
// DO NOT EDIT!


#ifndef BARC_MESSAGE_CAMERA_OUT_H
#define BARC_MESSAGE_CAMERA_OUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace barc
{
template <class ContainerAllocator>
struct camera_out_
{
  typedef camera_out_<ContainerAllocator> Type;

  camera_out_()
    : s()
    , curv_s()
    , ey(0.0)  {
    }
  camera_out_(const ContainerAllocator& _alloc)
    : s(_alloc)
    , curv_s(_alloc)
    , ey(0.0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _s_type;
  _s_type s;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _curv_s_type;
  _curv_s_type curv_s;

   typedef double _ey_type;
  _ey_type ey;





  typedef boost::shared_ptr< ::barc::camera_out_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::barc::camera_out_<ContainerAllocator> const> ConstPtr;

}; // struct camera_out_

typedef ::barc::camera_out_<std::allocator<void> > camera_out;

typedef boost::shared_ptr< ::barc::camera_out > camera_outPtr;
typedef boost::shared_ptr< ::barc::camera_out const> camera_outConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::barc::camera_out_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::barc::camera_out_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::barc::camera_out_<ContainerAllocator1> & lhs, const ::barc::camera_out_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.curv_s == rhs.curv_s &&
    lhs.ey == rhs.ey;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::barc::camera_out_<ContainerAllocator1> & lhs, const ::barc::camera_out_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace barc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::barc::camera_out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::barc::camera_out_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::barc::camera_out_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::barc::camera_out_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barc::camera_out_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::barc::camera_out_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::barc::camera_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20a2606aec8bfaba63eeafd610f117a5";
  }

  static const char* value(const ::barc::camera_out_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20a2606aec8bfabaULL;
  static const uint64_t static_value2 = 0x63eeafd610f117a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::barc::camera_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "barc/camera_out";
  }

  static const char* value(const ::barc::camera_out_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::barc::camera_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] s\n"
"float64[] curv_s\n"
"float64 ey\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::barc::camera_out_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::barc::camera_out_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.curv_s);
      stream.next(m.ey);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct camera_out_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::barc::camera_out_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::barc::camera_out_<ContainerAllocator>& v)
  {
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.s[i]);
    }
    s << indent << "curv_s[]" << std::endl;
    for (size_t i = 0; i < v.curv_s.size(); ++i)
    {
      s << indent << "  curv_s[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.curv_s[i]);
    }
    s << indent << "ey: ";
    Printer<double>::stream(s, indent + "  ", v.ey);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BARC_MESSAGE_CAMERA_OUT_H
